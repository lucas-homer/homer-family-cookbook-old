generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id              String                 @id @default(uuid())
  email           String                 @unique @db.VarChar(255)
  firstName       String?                @db.VarChar(255)
  lastName        String?                @db.VarChar(255)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  recipes         Recipe[]
  favoriteRecipes UsersFavoriteRecipes[]
  recipeReads     RecipeRead[]
  mealNotes       Note[]
  role            Role                   @default(MEMBER)
}

model RecipeRead {
  recipeId  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@id([recipeId, userId])
}

model UsersFavoriteRecipes {
  recipeId  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@id([recipeId, userId])
}

model Recipe {
  id               Int                    @id @default(autoincrement())
  title            String
  authorId         String
  author           User                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  instructions     String                 @db.Text
  ingredients      Ingredient[]
  servings         String?
  mealTypes        MealType[]
  favoritedUsers   UsersFavoriteRecipes[]
  recentlyViewedBy RecipeRead[]
  notes            Note[]

  @@index([authorId])
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipeId  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId, authorId])
}

model MealType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipes     Recipe[]
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  quantity  String?
  recipeId  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([recipeId])
}
